# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import internal.api.grpc.proto.compiled.tika_file_extract_pb2 as tika__file__extract__pb2

GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in tika_file_extract_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TikaFileExtractorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExtractFromFile = channel.unary_unary(
                '/TikaFileExtractor/ExtractFromFile',
                request_serializer=tika__file__extract__pb2.TikaFileExtract.SerializeToString,
                response_deserializer=tika__file__extract__pb2.ListTikaFileExtractResult.FromString,
                _registered_method=True)
        self.ExtractFromFileClientStream = channel.stream_unary(
                '/TikaFileExtractor/ExtractFromFileClientStream',
                request_serializer=tika__file__extract__pb2.TikaFileExtract.SerializeToString,
                response_deserializer=tika__file__extract__pb2.ListTikaFileExtractResult.FromString,
                _registered_method=True)
        self.ExtractFromFileServerStream = channel.unary_stream(
                '/TikaFileExtractor/ExtractFromFileServerStream',
                request_serializer=tika__file__extract__pb2.TikaFileExtract.SerializeToString,
                response_deserializer=tika__file__extract__pb2.ListTikaFileExtractResult.FromString,
                _registered_method=True)
        self.ExtractFromFileBothStream = channel.stream_stream(
                '/TikaFileExtractor/ExtractFromFileBothStream',
                request_serializer=tika__file__extract__pb2.TikaFileExtract.SerializeToString,
                response_deserializer=tika__file__extract__pb2.ListTikaFileExtractResult.FromString,
                _registered_method=True)


class TikaFileExtractorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ExtractFromFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExtractFromFileClientStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExtractFromFileServerStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExtractFromFileBothStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TikaFileExtractorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExtractFromFile': grpc.unary_unary_rpc_method_handler(
                    servicer.ExtractFromFile,
                    request_deserializer=tika__file__extract__pb2.TikaFileExtract.FromString,
                    response_serializer=tika__file__extract__pb2.ListTikaFileExtractResult.SerializeToString,
            ),
            'ExtractFromFileClientStream': grpc.stream_unary_rpc_method_handler(
                    servicer.ExtractFromFileClientStream,
                    request_deserializer=tika__file__extract__pb2.TikaFileExtract.FromString,
                    response_serializer=tika__file__extract__pb2.ListTikaFileExtractResult.SerializeToString,
            ),
            'ExtractFromFileServerStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ExtractFromFileServerStream,
                    request_deserializer=tika__file__extract__pb2.TikaFileExtract.FromString,
                    response_serializer=tika__file__extract__pb2.ListTikaFileExtractResult.SerializeToString,
            ),
            'ExtractFromFileBothStream': grpc.stream_stream_rpc_method_handler(
                    servicer.ExtractFromFileBothStream,
                    request_deserializer=tika__file__extract__pb2.TikaFileExtract.FromString,
                    response_serializer=tika__file__extract__pb2.ListTikaFileExtractResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TikaFileExtractor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('TikaFileExtractor', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TikaFileExtractor(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ExtractFromFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/TikaFileExtractor/ExtractFromFile',
            tika__file__extract__pb2.TikaFileExtract.SerializeToString,
            tika__file__extract__pb2.ListTikaFileExtractResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExtractFromFileClientStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/TikaFileExtractor/ExtractFromFileClientStream',
            tika__file__extract__pb2.TikaFileExtract.SerializeToString,
            tika__file__extract__pb2.ListTikaFileExtractResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExtractFromFileServerStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/TikaFileExtractor/ExtractFromFileServerStream',
            tika__file__extract__pb2.TikaFileExtract.SerializeToString,
            tika__file__extract__pb2.ListTikaFileExtractResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExtractFromFileBothStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/TikaFileExtractor/ExtractFromFileBothStream',
            tika__file__extract__pb2.TikaFileExtract.SerializeToString,
            tika__file__extract__pb2.ListTikaFileExtractResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
